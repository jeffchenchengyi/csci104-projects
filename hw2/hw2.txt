Problem 1 (More git questions, 10%)
In this problem, we will be working with a fictional Sample Repository, 
which we pretend is located at https://github.com/usc-csci104-spring2018/SampleRepo, 
and contains README.md. (There is no actual repo there, so don't be surprised if 
you cannot actually clone it or otherwise interact with it.) 
This exercise is designed to measure your understanding of the file status 
lifecycle in git. Please frame your answers in the context of the following 
lifecycle based on your interaction with the repository as specified below:

Git File Status Lifecycle

figure courtesy of the Pro Git book by Scott Chacon

Parts (a) through (f) should be done in sequence. 
In other words, when you get to part (f), you should assume that 
you already executed the earlier commands (a), (b), ..., (e). 
You must use the terminalogy specified in the lifecycle shown above, 
for example the output of git status is not accepted as a valid answer. 
For the purposes of this question, you can assume you have full access 
(i.e., read/write) to the repository.

Part (a):
What is the status of README.md after performing the 
following operations:

#Change directory to the home directory
cd
#Clone the SampleRepo repository
git clone git@github.com:usc-csci104-spring2018/SampleRepo.git
#Change directory into the local copy of SampleRepo
cd SampleRepo

ANSWER: 
The status of README.md is currently tracked(Unmodified).


Part (b):
What is the status of README.md and fun_problem.txt after performing 
the following operations:

#Create a new empty file named fun_problem.txt
touch fun_problem.txt
#List files
ls
#Append a line to the end of README.md
echo "Markdown is easy" >> README.md

ANSWER:
The status of README.md is currently tracked(Modified)
and fun_problem.txt is currently untracked.


Part (c):
What is the status of README.md and fun_problem.txt after performing 
the following operation:

git add README.md fun_problem.txt

ANSWER:
Both README.md and fun_problem.txt are currently tracked(Staged) and 
will go into the next commit.


Part (d):
What is the status of README.md and fun_problem.txt after performing
the following operations:

git commit -m "My opinion on markdown"
echo "Markdown is too easy" >> README.md
echo "So far, so good" >> fun_problem.txt

ANSWER:
Both README.md and fun_problem.txt became tracked(Unmodified) and 
currently are tracked(Modified) after the echo commands.


Part (e):
What is the status of README.md and fun_problem.txt after performing 
the following operations:

git add README.md
git checkout -- fun_problem.txt
Also, what are the contents of fun_problem.txt? Why?

ANSWER:
README.md is currently tracked(Staged) and will go into the next
commit. But fun_problem.txt is currently tracked(Unmodified) as
git checkout discard the changes made 
by `echo "So far, so good" >> fun_problem.txt` in part (d), 
reverting the status of the file to the
last commit in part (d). fun_problem.txt presently still contains 
nothing.


Part (f):
What is the status of README.md after performing the following operation:

echo "Fancy git move" >> README.md
Explain why this status was reached.

ANSWER:
README.md is now listed as both staged for commit and also unstaged.
The README.md version that is tracked(Staged) contains data before
`echo "Fancy git move" >> README.md`, because git add README.md in 
part (e) only staged that version into the commit. Presently, there 
will also be another version of the README.md in the actual working
directory with changes made after `echo "Fancy git move" >> README.md`,
but has not been staged yet. "If you modify a file after you run git add, 
you have to run git add again to stage the latest version of the file" 
- courtesy of the Pro Git book by Scott Chacon.




Problem 3 (Abstract Data Types, 20%)
For each of the following data storage needs, describe which 
abstract data types you would suggest using. Natural choices would 
include list, set, and map.

Try to be specific, e.g., rather than just saying "a list", say "a 
list of integers" or "a list of structs consisting of a name (string) 
and a GPA (double)". Also, state any assumptions you have made, and 
give a brief explanation for your answers: we are grading you at least 
as much on your justification as on the correctness of the answer. 
Also, if you give a wrong answer, when you include an explanation, 
we'll know whether it was a minor error or a major one, and can give 
you appropriate partial credit. Also, there may be multiple equally 
good options, so your justification may get you full credit.

1. a data type that stores all of the items at a restaurant, 
ordered by their number on the menu (an integer from 1 to 100).

ANSWER:
Assuming that the menu is to be placed on a website just for 
consumers to view and is organized like this:
Chinese Food Menu:
-> Meat
||-> 1. Orange Chicken
||-> 2. Stir-fried beef
||-> 3. Sweet and sour pork
-> Vegetable
||-> 1. Brocolli with garlic
||-> 2. Spinach with 3 egg
-> Noodle
||-> 1. Egg noodle with pork chop
||-> 2. Dry noodle with minced pork
-> Drink
||-> 1. Lime juice
||-> 2. Grass Jelly drink
||-> 3. Milk tea

Order is important: 
A list of sub-menu structs containing sub-menu string name(Meat), 
int size, and a list pointer to the sub-menu list containing 
fooditem structs consisting of string name(Orange chicken), float
price, bool bestseller, bool isSpicy, and some printList, getter,
setter, void insertNewFoodItem, and void removeFoodItem functions.


2. a data type that stores all of the movies in the Star Wars universe.

ANSWER:
Assuming that all the movies are to be displayed on a blog 
just for visitors to view and is organized like this:
All Star Wars films:
-> Trilogies
||-> 1. I - The Phantom Menace (1999)
||-> 2. II - Attack of the Clones (2002)
||-> 3. III - Revenge of the Sith (2005)
-> Anthology
||-> 1. Rogue One: A Star Wars Story (2016)
||-> 2. Solo: A Star Wars Story (2018)
-> Animated
||-> 1. The Clone Wars (2008)
-> TV
||-> 1. Holiday Special (1978)
||-> 2. Caravan of Courage: An Ewok Adventure (1984)
||-> 3. Ewoks: The Battle for Endor (1985)

Order is important in order to display movies on the blog in 
order: 
A list of sub-catgeory film structs containing sub-catgeory 
film string name(Trilogies), int size, and a list pointer to 
the sub-catgeory film containing film structs consisting 
of string name(I - The Phantom Menace), string netflix url link to 
purchase, bool bestseller, int year, and some printList, 
getter, setter, void insertNewFilm, and void removeFilm functions.


3. a data type that stores all of the books on Amazon: given an ISBN 
(a 13-digit number), it produces the book with that number.

ANSWER:
Assuming that the querying of book is only through ISBN, not 
by book title and database for one book is as shown:
Key:             Value:
9780132923729 => book struct with 
                 string name = Data Abstraction & Problem 
                 Solving with C++, 6th Ed. Carrano & Henry, 
                 Pearson, 2013... 

Order is not important, but there is a need for ease of query:
A map with unique key = ISBN (13-digit number) and value = 
pointer to book struct that consists of string name, float 
price, string author, int year, string description, pointer to 
list of customer reviews, int rating.


4. a data type that stores all movies: given a year, 
it produces all movies released in that year.

ANSWER:
Assuming that the user is querying movies for display on website 
only by year released, not by title:
Key:    Value:
2017 => pointer to a movie list containing film
        structs...

There is a need for ease of query and order is important to output
all movies in the order of release:
A map with unique key = year and value = pointer to a list 
of film structs that consists of string filmTitle, string netflix 
url link to purchase, string director, int year, string 
description, pointer to list of customer reviews, int rating.


5. a data type that stores all of the episodes of Game of Thrones: 
given a season and episode number, it produces the requested episode.

ANSWER:
Assuming that the user is querying the episode on a website by first
searching with season number (an integer or name of season), and 
then searching with episode number (an integer) from the list returned:
Season number: 1
Episode number: 3
-> Season 7 (2017) [Position 6 in list]
||-> 3. The Queen's Justice [Position 2 in list]

Order is important as there may be times when we want to just output
all episodes in the season before selecting which episode:
A list of season structs with positons in list corresponding 
to the order of season number that contain pointers to a list of 
episode structs that consist of string episodeTitle, string netflix 
url link to purchase, string director, int year, string description, 
pointer to list of customer reviews, int rating, getter, setter, 
insert, and delete functions also required for the list. The getter
function is used to retrieve the episode given the episode number 
after querying the season number.



Problem 4 (Linked Lists, Recursion, 10%)
Consider the following C++ code. What linked list is returned if funcA 
is called with the input linked list 1,2,3,4,5? All of the points for 
this problem will be assigned based on your explanation, since we have 
full faith in your ability to run this program and copy down the answer. 
We strongly recommend solving this by hand, and only using a compiler 
to verify your answer.

ANSWER:

linked list returned: 5 4 3 2 1
Head pointer of input list 
--------------------------------------------------
|in|->|0th Node, value 1|-> 
|1st Node, value 2|-> |2nd Node, value 3|-> 
|3rd Node, value 4|-> |4th Node, value 5|-> NULL
--------------------------------------------------
is passed into funcA. in != NULL, hence nullptr isnt
returned from if statement. r becomes a copy of
head pointer in. while loop traverses the list using 
r pointer until r points to the last element when 
r->next == NULL. head pointer in is then passed
into funcB. 
funcB checks if head pointer in is NULL.
nullptr isnt returned. 
in->next is passed into funcB until in->next == NULL
is passed into funcB in which case a nullptr is returned.
The nullptr returned is stored in p.
Since p == nullptr, if statement is not successful and
in is returned. At this point, in is pointing to 
the last Node with value of 5. This pointer to Node with 
value 5 is returned to be stored in p. 
if statement is successful as p is a pointer to Node
with value 5. Hence, p->next = in is executed. in was 
pointing to Node with value 4 and now Node with value 5's
next is a pointer to Node with value 4.
--------------------------------------------------
|in|->|0th Node, value 1|-> 
|1st Node, value 2|-> |2nd Node, value 3|-> 
|3rd Node, value 4|-> <-|4th Node, value 5|
--------------------------------------------------
in is returned and p now stores a pointer to Node with
value 4. p is not a nullptr so if statement is executed
and p->next = in. But notice, there's no way of retrieving 
Node with value 5 anymore, it's lost.
--------------------------------------------------
|in|->|0th Node, value 1|-> 
|1st Node, value 2|-> |2nd Node, value 3|-> 
<-|3rd Node, value 4| <-|4th Node, value 5|
--------------------------------------------------
in is returned and p now stores a pointer to Node with
value 3. p is not a nullptr so if statement is executed
and p->next = in. But notice, there's no way of retrieving 
Node with value 4 anymore, it's lost.
--------------------------------------------------
|in|->|0th Node, value 1|-> 
|1st Node, value 2|-> <-|2nd Node, value 3| 
<-|3rd Node, value 4| <-|4th Node, value 5|
--------------------------------------------------
in is returned and p now stores a pointer to Node with
value 2. p is not a nullptr so if statement is executed
and p->next = in. But notice, there's no way of retrieving 
Node with value 3 anymore, it's lost.
--------------------------------------------------
|in|->|0th Node, value 1|-> 
<-|1st Node, value 2| <-|2nd Node, value 3| 
<-|3rd Node, value 4| <-|4th Node, value 5|
--------------------------------------------------
in is returned and p now stores a pointer to Node with
value 1. p is not a nullptr so if statement is executed
and p->next = in, in was originally pointing to Node 
with value 1. Meaning that now the list has lost all
previous Nodes and is pointing at itself.
--------------------------------------------------
|in|-> <-|0th Node, value 1| 
<-|1st Node, value 2| <-|2nd Node, value 3| 
<-|3rd Node, value 4| <-|4th Node, value 5|
--------------------------------------------------
in is returned to funcA now and stored in l.
l->next = nullptr. in is currently pointing to 
the Node with value 1, while Node with value 1's
next is pointing to nullptr.
--------------------------------------------------
            |in|
             |
             V
nullptr <-|0th Node, value 1| 
<-|1st Node, value 2| <-|2nd Node, value 3| 
<-|3rd Node, value 4| <-|4th Node, value 5|
--------------------------------------------------
r, which was pointing to the last element before
the list was reversed is now the head of the list
--------------------------------------------------
    |r|
     |
     V
|0th Node, value 5| 
->|1st Node, value 4|->|2nd Node, value 3| 
->|3rd Node, value 2|->|4th Node, value 1|->nullptr
                                 ^
                                 |
                                |in|
--------------------------------------------------
r is returned by funcA which is pointing to list
5 4 3 2 1, while in points to a single Node with 
value 1 that has next pointing to nullptr.

struct Node {
    int value;
    Node *next;
};

Node* funcB(Node* in) {
    if (!in) return nullptr;
    Node *p = funcB(in->next);
    if (p) {
        p->next = in;
    }
    return in;
}

Node* funcA(Node* in) {
    if (!in) return nullptr;
    Node *r = in;
    while (r->next) r = r->next;
    Node *l = funcB(in);
    l->next = nullptr;
    return r;
}
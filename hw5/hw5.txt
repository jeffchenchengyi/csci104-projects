Problem 1c (Break QuickSort, 5%)
Give an array of size 10 of doubles, where the pivot will always 
be the 2nd largest or 2nd smallest element of the array (when using 
the median-of-3 pivot). Explain your answer.

ANSWER:
Array (Double): {8.0, 1.0, 4.0, 6.0, 7.0, 2.0, 0.0, 3.0, 5.0, 9.0}
An array like the one above would yield the 2nd 
largest/smallest value using the median of 3 method.

The first recursive call - quick_sort(myArray, comp, 0, myArray.size() - 1)
- will be called, hence quick_sort(myArray, less<T>(), 0, 9). 
start = 8.0 < end = 9.0, if statement is executed, and mid is
calculated as floor((0 + 9) / 2) = 4. medianOfThree function is called
with start = 0, mid = 4, end = 9. 

1st if statement is executed as
comp(C++'s standard less-than functor less<T>) evaluates to false as
myArray[0] = 8.0 and myArray[4] = 7.0 are not in order, !false = true, 
statement is executed and values are swapped. 

2nd if statement is not executed as 
comp(C++'s standard less-than functor less<T>) evaluates to true as
myArray[0] = 7.0 and myArray[9] = 9.0 are in order, !true = false,
hence values should not be swapped.

3rd if statement is executed, because we want to make it such
that the median is at the end position. Therefore, since myArray[4] = 8.0
and myArray[9] = 9.0 is in order, we will swap the values to get the 
median = 8.0 in the end position.
Hence, median chosen with the median of 3 method is 8.0, which is 
the 2nd largest/smallest element of the 3.

Array currently looks like: {7.0, 1.0, 4.0, 6.0, 9.0, 2.0, 0.0, 3.0, 5.0, 8.0}

Back in the quick_sort function, partition is called, placing all the elements
smaller than 8.0 on the left of position 8 and all the elements greater than
8.0 on the right of position 8.

Array currently looks like: {7.0, 1.0, 4.0, 6.0, 2.0, 0.0, 3.0, 5.0, 8.0, 9.0}

Subsequently, recursive calls to quicksort(myArray, less<T>(), 0, 7) and
quicksort(myArray, less<T>(), 9, 9).

quicksort(myArray, less<T>(), 0, 7):
The median chosen for quicksort(myArray, less<T>(), 0, 7) will be 6.0 as
start = 7.0, mid = 6.0, end = 5.0, hence 2nd largest/smallest of the 3.

Array currently looks like: {5.0, 1.0, 4.0, 7.0, 2.0, 0.0, 3.0, 6.0, 8.0, 9.0}

Back in the quick_sort function, partition is called, placing all the elements
smaller than 6.0 on the left of position 6 and all the elements greater than
6.0 on the right of position 6.

Array currently looks like: {5.0, 1.0, 4.0, 2.0, 0.0, 3.0, 6.0, 7.0, 8.0, 9.0}

Subsequently, recursive calls to quicksort(myArray, less<T>(), 0, 5) and
quicksort(myArray, less<T>(), 7, 7).

quicksort(myArray, less<T>(), 0, 5):
The median chosen for quicksort(myArray, less<T>(), 0, 5) will be 4.0 as
start = 5.0, mid = 4.0, end = 3.0, hence 2nd largest/smallest of the 3.

Array currently looks like: {3.0, 1.0, 5.0, 2.0, 0.0, 4.0, 6.0, 7.0, 8.0, 9.0}

Back in the quick_sort function, partition is called, placing all the elements
smaller than 4.0 on the left of position 4 and all the elements greater than
4.0 on the right of position 4.

Array currently looks like: {3.0, 1.0, 2.0, 0.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0}

Subsequently, recursive calls to quicksort(myArray, less<T>(), 0, 3) and
quicksort(myArray, less<T>(), 5, 5).

quicksort(myArray, less<T>(), 0, 3):
The median chosen for quicksort(myArray, less<T>(), 0, 3) will be 1.0 as
start = 3.0, mid = 1.0, end = 0.0, hence 2nd largest/smallest of the 3.

Array currently looks like: {0.0, 3.0, 2.0, 1.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0}

Back in the quick_sort function, partition is called, placing all the elements
smaller than 1.0 on the left of position 1 and all the elements greater than
1.0 on the right of position 1.

Array currently looks like: {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0}

Subsequently, recursive calls to quicksort(myArray, less<T>(), 0, 0) and
quicksort(myArray, less<T>(), 2, 3).

quicksort(myArray, less<T>(), 0, 0):
quicksort(myArray, less<T>(), 0, 0) is then called after all the subsequent returns
, which will return as start = 0 is not less than end = 0.

quicksort(myArray, less<T>(), 2, 3):
This is the base case as we are only actually comparing 2 elements as start 
and mid point to the same element 2.0 in the array, any of which are the 
2nd largest/smallest element. 

Array currently looks like: {0.0, 1.0, 3.0, 2.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0}

Back in the quick_sort function, partition is called, placing all the elements
smaller than 2.0 on the left of position 2 and all the elements greater than
2.0 on the right of position 2.

Array currently looks like: {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0}

After the return, 
quicksort(myArray, less<T>(), 5, 5):
quicksort(myArray, less<T>(), 5, 5) is then called after all the subsequent returns
, which will return as start = 5 is not less than end = 5.

quicksort(myArray, less<T>(), 7, 7):
quicksort(myArray, less<T>(), 7, 7) is then called after all the subsequent returns
, which will return as start = 7 is not less than end = 7.

quicksort(myArray, less<T>(), 9, 9):
quicksort(myArray, less<T>(), 9, 9) is then called after all the subsequent returns
, which will return as start = 9 is not less than end = 9.

Array is now sorted: {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0}

Hence, all the medians we chose in this array are all the 2nd largest/smallest
among the 3 elements we compare in the median of 3 method.





Problem 2 (Break Interpolation Search, 10%)
Recall the Interpolation Search algorithm from class. We said in class 
that it could take linear time in the worst case. 
Describe an array of size n of double, such that Interpolation Search will 
query each entry of the array before finally finding its target. 
Explain your answer.

ANSWER:
Array of size n(Double): {1.0, 2.0, 3.0, ..., 9.0, 10.0, 100,000.0}

Target = 10.0

An array like the one above where the distribution is heavily skewed such
that the Value Range >> Index Range will cause Interpolation Search to 
query each entry in the array before finding the target.

Target Index = [(Index Range / Value Range) * (Target Value - Start Value)] + Start Index

The formula above is used to find the index to search for in Interpolation Search.
However, if the Value Range >> Index Range, (Index Range / Value Range) -> 0,
which causes [(Index Range / Value Range) * (Target Value - Start Value)] -> 0,
causing the Target Index = Start Index, making the search linear as each element before
the target value needs to be queried as the index is incrementing by approx. 1 in 
each iteration of the search. Hence, we will query each element of the array from 
position 0 until we reach the 2nd last position of the array. The last element is queried
when finding the value range.
Thus, taking linear runtime.





Problem 3 (Median Finding in Linear Time, 30%)
ANSWER: 
Analysis is in hw5q3.pdf
Problem 1 (Course Policies, 10%)
Carefully study the information on the course web site, then answer the following questions about course policies (anywhere from no to all answers may be correct):

Place your answers to this question in a file named hw1.txt

Part (a):
Which of the following are acceptable behaviors in solving homeworks/projects?

1.Looking up information relevant to the course online.-[CORRECT]
2.Looking up or asking for sample solutions online.
3.Copying code from my classmates, and then editing it significantly.
4.Asking the course staff for help.-[CORRECT]
5.Sitting next to my classmate and coding together as a team or with significant conversation about our approach.
6.Sharing my code with a classmate, if he/she promises not to copy it, but to just read over it and learn from it.

Part (b):
To dispute a grade on an assignment you should:

1.Email your professor immediately.-[CORRECT]
2.Assign the issue to your grader on GitHub.-[CORRECT]
3.Go see a course TA if assigning the issue to your grader did not resolve your concern.-[CORRECT]
4.Raise an issue within 1 week of receiving the grade.-[CORRECT]

Part (c):
Which of the following are recommended ways of writing code?

1.gedit
2.emacs-[CORRECT]
3.Eclipse-[CORRECT]
4.sublime-[CORRECT]
5.Microsoft Visual Studio-[CORRECT]
6.notepad

Part(d):
What is the late submission policy?

1.Each assignment can be submitted late for 50% credit.
2.Each student has 3 late days of which only one can be used per HW.-[CORRECT]
3.Students need to get approval before submitting an assignment late.
4.One hour late submission is acceptable for each assignment.
5.There is no late policy.

Part(e):
What should you do to ensure you are submitting your code correctly?

1.Nothing: submit your code, then sit back and enjoy.
2.Clone your github directory, checkout the SHA you plan to submit, and rerun your tests.-[CORRECT]
3.Use the long SHA in your submission (20+ digits/letters).-[CORRECT]
4.Check the output from the submission system when you submit your code: this may alert you to missing files or compilation errors.-[CORRECT]
5.Resubmit your code if you find additional problems before the deadline.-[CORRECT]



Problem 2 (Git, 10%)
Carefully review and implement the steps discussed in Lab1. Then answer the following questions:

Continue your answers to this question in the file named hw1.txt

Part (a):
Which of the following git user interfaces are accepted and supported in this course?

1.Git Bash (Windows)
2.GitHub Desktop Client
3.Terminal (Mac or Linux)
4.Eclipse eGit
5.Tower Git Client

Part (b):
When cloning a Git repo, which of the following should you avoid?

1.Cloning into a folder that itself is a git repo.-[CORRECT]
2.Cloning into a sync'ed folder like Dropbox or Google Drive.-[CORRECT]
3.Cloning into the Desktop folder of your VM.

Part (c):
Provide the appropriate git command to perform the following operations:

1.Stage an untracked file to be committed. The (hypothetical) file is called 'hw1q2b.cpp'.

ANSWER: git add hw1q2b.cpp

2.Display the details of the last three commits in the repository.

ANSWER: git log -p -3

Part (d)
Let's say you staged three files to be committed. Then, you ran the following command:

git commit

What will git do?

ANSWER: git will prompt you for a commit message using the editor like such:

//
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   newfile1
#	new file:   newfile2
#	new file:   newfile3
#

and after typing the message, saving, and closing the editor, the command prompt will send a message stating how many files are added, any changes, insertions, and deletions. 

Part (e)
What is the full command to re-clone your private CSCI104 repo to your VM? Assume you are in an appropriate folder.

ANSWER: git clone git@github.com:usc-csci104-spring2018/hw-chen364.git



Problem 4 (Recursion, 10%)
Continue your answers to this question in the file name hw1.txt

Consider the following C++ code, and answer the following questions.

1.What gets output when you call funcA([1,2,3,4,5], 5)? More importantly, why does this get output? All of the points for this problem will be assigned based on your explanation (since we have no doubt that you can run this program for a fixed input and copy down the output). We strongly recommend solving this by hand/calculator, and only using a compiler to verify your answer.

ANSWER: 

1
2
3
4
5

-> This is because when funcA([1,2,3,4,5], 5) is called, funcB(a, 0, 4) is then called. 
-> Inside funcB(a, 0, 4), because 0 != 4, the else statement is executed. 
-> int mid = (0 + 4) / 2 = 2, funcB(a, 0, 2) and subsequently, funcB(a, 3, 4) is called.
-> A new stack frame is pushed onto our call stack and funcB(a, 0, 2) needs to be first executed. By recursion, funcB(a, 0, 2) invokes another else statement as 0 != 2, int mid = 1 is assigned and funcB(a, 0, 1) and subsequently funcB(a, 2, 2) is executed. 
-> funcB(a, 0, 1) is first executed, hence, another new stack frame onto the original call stack and invokes the else statement again because 0 != 1, hence, assigning int mid = 0, funcB(a, 0, 0) and funcB(a, 1, 1). 
-> funcB(a, 0, 0) is executed first, hence, another new stack frame on the call stack and if statement is executed as 0 == 0, outputting a[0], which is the first element of the array, which is 1. 
-> When funcB(a, 0, 0) ends, it is popped of the call stack and funcB(a, 1, 1) is executed, popped off, then funcB(a, 2, 2) is executed, then popped off, then funcB(a, 3, 3) is executed, then popped off, and finally funcB(a, 4, 4) is executed, popped off and the program ends with the outputs as shown above.

2.For what input values would funcB fail to terminate? Why will funcB always terminate for other input values?

ANSWER: funcB will fail to terminate if the min value given is larger than the max value (max > min), e.g. funcB(a, 6, 1)... as the int mid assigned will never be larger than the min and never be smaller than the max. This will lead to a perpetual gap between the min and max value such that the if statement will never get executed and base case is never called, hence, program will go on forever and not terminate. Another case is when 

3.What gets output when you call funcB(a, min, max) and why?

void funcA (int *a, int size) {
    funcB(a, 0, size-1);
}

void funcB(int *a, int min, int max) {
    if (min == max)
        cout << a[min] << endl;
    else {
        int mid = (min+max)/2;
        funcB(a, min, mid);
        funcB(a, mid+1, max);
    }
}